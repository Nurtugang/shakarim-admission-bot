from shakarim_admission_bot.gemini_config import ask_gemini
from shakarim_admission_bot.firebase_config import firebase_db

def is_admission_related(question):
    """
    Проверяет, связан ли вопрос с темой поступления в университет.
    """
    # Используем Gemini для определения релевантности вопроса
    system_instruction = """
    Ты - фильтр вопросов для бота приемной комиссии Университета Шакарима.
    Твоя задача - определить, относится ли вопрос к теме поступления в университет.
    
    Темы, которые считаются релевантными:
    - Документы для поступления
    - Гранты и стипендии
    - Сроки подачи заявлений и проведения экзаменов
    - Специальности и факультеты
    - Общежития и условия проживания студентов
    - Вступительные экзамены
    - Процедура подачи документов
    - Другие вопросы, напрямую связанные с поступлением
    
    Ответь строго "yes" если вопрос релевантный или "no" если не релевантный.
    Не давай никаких пояснений, только "yes" или "no".
    """
    
    response = ask_gemini(
        question=f"Относится ли следующий вопрос к теме поступления в университет?: '{question}'",
        system_instruction=system_instruction,
        max_output_tokens=10,
        temperature=0.1
    )
    
    # Очищаем ответ от возможных лишних символов
    response = response.strip().lower()
    
    # Проверяем ответ
    return "yes" in response

def get_relevant_knowledge(question):
    """
    Получает релевантные знания из базы данных на основе вопроса.
    Простая реализация без сложных алгоритмов.
    """
    # Получаем все документы из базы знаний
    docs = firebase_db.collection("knowledge-base").stream()
    
    knowledge_list = []
    
    for doc in docs:
        try:
            # Пытаемся получить текст из документа
            knowledge_list.append(doc.to_dict()["text"])
        except KeyError:
            # Если не удалось найти ключ 'text', выводим информацию
            print(f"Документ с ID {doc.id} не содержит поля 'text'.")
    
    # Объединяем всю базу знаний в один текст
    knowledge_text = "\n".join(knowledge_list)
    
    return knowledge_text


def smart_ask_gemini(question):
    """
    Улучшенная версия функции ask_gemini, которая включает контекст
    из базы знаний Firebase для более точных ответов.
    """

    # Получаем релевантные знания из базы данных
    knowledge = get_relevant_knowledge(question)
    
    # Создаем системную инструкцию, которая включает контекст
    system_instruction = f"""
    Ты - бот-помощник для поступающих в Университет Шакарима города Семей.
    
    Твоя задача - давать точные и полезные ответы на вопросы о поступлении.
    Будь дружелюбным, информативным и кратким.
    
    Используй предоставленные знания для ответов на вопросы:
    
    {knowledge}
    
    Если в предоставленных знаниях нет ответа на вопрос, используй свои общие знания.
    Но всегда отдавай приоритет информации из базы знаний.
    
    Отвечай только на русском языке.
    """
    
    # Отправляем запрос к Gemini с контекстом
    response = ask_gemini(
        question=question,
        system_instruction=system_instruction,
        max_output_tokens=500,  # Увеличиваем максимальную длину ответа
        temperature=0.2  # Делаем ответы более точными
    )
    
    return response